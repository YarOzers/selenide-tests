Index: Jenkinsfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pipeline {\n    agent any\n\n    tools {\n        maven 'Maven' // Имя настройки Maven, указанное в Global Tool Configuration Jenkins\n        allure 'Allure'  // Имя настройки Allure\n    }\n\n    parameters {\n        string(name: 'TEST_IDS', defaultValue: '', description: 'Comma-separated list of test IDs to run')\n    }\n\n    environment {\n        ALLURE_RESULTS_DIR = 'target/allure-results'\n        ALLURE_REPORT_DIR = 'target/allure-report'\n        GITHUB_REPO_URL = 'https://github.com/YarOzers/selenide-tests' // HTTPS URL репозитория\n        GIT_CREDENTIALS_ID = 'jenkins-git-token' // ID, который вы назначили в Jenkins для токена\n        SELENOID_URL = 'http://188.235.130.37:4444/wd/hub'\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                // Используем токен для аутентификации\n                checkout([$class: 'GitSCM',\n                          branches: [[name: '*/main']],\n                          userRemoteConfigs: [[url: \"${GITHUB_REPO_URL}\", credentialsId: \"${GIT_CREDENTIALS_ID}\"]]\n                ])\n            }\n        }\n\n        stage('Run Tests') {\n            steps {\n                script {\n                    def testIds = params.TEST_IDS ? \"-Dgroups=${params.TEST_IDS}\" : \"\"\n                    echo \"Running tests with options: ${testIds}\"\n                    // Запуск Selenide тестов через Selenoid\n                    sh \"mvn test ${testIds} -Dselenide.remote=${SELENOID_URL} -Dselenide.browser=chrome -Dselenide.browserCapabilities.enableVNC=true -Dallure.results.directory=target/allure-results\"\n                }\n            }\n        } // <-- Закрывающая скобка для блока Run Tests\n\n        stage('Generate Allure Report') {\n            steps {\n                script {\n                    // Проверка существования директории с результатами тестов перед генерацией отчета\n                    if (fileExists(\"${ALLURE_RESULTS_DIR}\")) {\n                        sh \"allure generate ${ALLURE_RESULTS_DIR} -o ${ALLURE_REPORT_DIR} || true\"\n                    } else {\n                        echo \"Allure results directory does not exist. Skipping report generation.\"\n                    }\n                }\n            }\n        }\n\n        stage('Publish Allure Report') {\n            steps {\n                script {\n                    if (fileExists(\"${ALLURE_REPORT_DIR}\")) {\n                        allure includeProperties: false, jdk: '', results: [[path: \"${ALLURE_RESULTS_DIR}\"]]\n                    } else {\n                        echo \"Allure report directory does not exist. Skipping report publication.\"\n                    }\n                }\n            }\n        }\n        \n        stage('Debug Directories') {\n            steps {\n                script {\n                    sh 'echo \"Listing target directory contents:\"'\n                    sh 'ls -la target'\n                    sh 'echo \"Listing allure-results directory contents:\"'\n                    sh 'ls -la target/allure-results'\n                }\n            }\n        }\n    }\n\n    post {\n        success {\n            script {\n                if (fileExists('target/surefire-reports/TEST-TestSuite.xml')) {\n                    def result = sh(script: 'cat target/surefire-reports/TEST-TestSuite.xml', returnStdout: true)\n                    httpRequest httpMode: 'POST',\n                                url: 'http://188.235.130.37:9111/api/test-results',\n                                requestBody: result,\n                                contentType: 'APPLICATION_XML'\n                } else {\n                    echo \"Test report not found, skipping HTTP request.\"\n                }\n            }\n        }\n\n        failure {\n            echo \"Build failed!\"\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Jenkinsfile b/Jenkinsfile
--- a/Jenkinsfile	(revision c597b2a77d560b2ef8602c31e4fb1b52f2059393)
+++ b/Jenkinsfile	(date 1725464254019)
@@ -35,10 +35,10 @@
                     def testIds = params.TEST_IDS ? "-Dgroups=${params.TEST_IDS}" : ""
                     echo "Running tests with options: ${testIds}"
                     // Запуск Selenide тестов через Selenoid
-                    sh "mvn test ${testIds} -Dselenide.remote=${SELENOID_URL} -Dselenide.browser=chrome -Dselenide.browserCapabilities.enableVNC=true -Dallure.results.directory=target/allure-results"
+                    sh "mvn clean test ${testIds} -Dselenide.remote=${SELENOID_URL} -Dselenide.browser=chrome -Dselenide.browserCapabilities.enableVNC=true -Dallure.results.directory=target/allure-results"
                 }
             }
-        } // <-- Закрывающая скобка для блока Run Tests
+        }
 
         stage('Generate Allure Report') {
             steps {
@@ -64,7 +64,7 @@
                 }
             }
         }
-        
+
         stage('Debug Directories') {
             steps {
                 script {
@@ -79,21 +79,36 @@
 
     post {
         success {
+            archiveArtifacts artifacts: 'target/surefire-reports/TEST-*.xml', allowEmptyArchive: true
             script {
-                if (fileExists('target/surefire-reports/TEST-TestSuite.xml')) {
-                    def result = sh(script: 'cat target/surefire-reports/TEST-TestSuite.xml', returnStdout: true)
-                    httpRequest httpMode: 'POST',
-                                url: 'http://188.235.130.37:9111/api/test-results',
-                                requestBody: result,
-                                contentType: 'APPLICATION_XML'
-                } else {
-                    echo "Test report not found, skipping HTTP request."
-                }
+                // Сбор данных из всех *-result.json файлов в массив
+                def jsonFiles = sh(script: "find ${ALLURE_RESULTS_DIR} -name '*-result.json'", returnStdout: true).trim().split('\n')
+                def results = []
+
+                jsonFiles.each { file ->
+                    def content = readJSON file: file
+                    def result = [
+                        AS_ID: content.labels.find { it.name == 'AS_ID' }?.value,
+                        status: content.status,
+                        finishTime: content.stop // Или другой ключ, содержащий время окончания выполнения
+                    ]
+                    results << result
+                }
+
+                // Запись массива в results.json
+                def resultsFile = "${ALLURE_RESULTS_DIR}/results.json"
+                writeJSON file: resultsFile, json: results
+
+                // Отправка файла на сервер
+                def resultsJson = readFile file: resultsFile
+                httpRequest httpMode: 'POST',
+                            url: 'http://188.235.130.37:9111/api/test-results',
+                            requestBody: resultsJson,
+                            contentType: 'APPLICATION_JSON'
             }
         }
-
         failure {
             echo "Build failed!"
         }
     }
-}
+}
\ No newline at end of file
